name: goreleaser

on:
  create:
    tags:

jobs:
  qovery:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      -
        name: Fetch tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Ensure tag match the current version
        run: |
          version=$(git tag | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)
          file="cmd/version.go"
          app_version=$(grep '// ci-version-check' $file | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          if [ "$version" != "$app_version" ]; then
            echo "Tag version ($version) does not match application version ($app_version) in $file"
            exit 1
          fi

          file="charts/pleco/Chart.yaml"
          chart_version=$(grep '^version:' $file | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          chart_app_version=$(grep '^appVersion:' $file | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          if [ "$version" != "$chart_app_version" ]; then
            echo "Tag version ($version) does not match Chart appVersion ($chart_app_version) in $file"
            exit 1
          fi
          if [ "$version" != "$chart_version" ]; then
            echo "Tag version ($version) does not match Chart version ($chart_version) in $file"
            exit 1
          fi

          file="charts/pleco/values.yaml"
          helm_version=$(grep 'plecoImageTag' $file | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          if [ "$version" != "$helm_version" ]; then
            echo "Tag version ($version) does not match Helm chart version ($helm_version) in $file"
            exit 1
          fi
      -
        name: Set up Go
        uses: actions/setup-go@main
        with:
          go-version: 1.21
      -
        name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          args: "--timeout 5m0s"
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v1
        with:
          version: "v1.26.2"
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}
      -
        name: Get smart tag
        id: prepare
        uses: Surgo/docker-smart-tag-action@v1
        with:
          docker_image: qoveryrd/pleco
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: DockerHub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      -
        name: Docker build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.prepare.outputs.tag }}
      -
        name: Publish Helm charts
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
